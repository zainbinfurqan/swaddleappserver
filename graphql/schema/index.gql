const { buildSchema } = require('graphql');

module.exports = buildSchema(`
        type Event {
            _id: ID!
            title: String!
            description: String!
            price: Float!
            date: String!
            creator: User!
        }
        
        type Response {
            statusCode:Int!
            status:Boolean!
            message:String!
        }

        type User {
            _id: ID!
            firstName: String!
            lastName: String!
            email: String!
            password: String
            createdEvents: [Event!]
        }

         type UpdateUser {
             _id:ID!
            education: String!
            experience: String!
            qualifications: String!
            subSpecialties: String!
            status: Boolean!
            statusCode: Int!
            message : String!
        }
        type CreatePractioner{
            status: Boolean!
            statusCode: Int!
            message : String!
        }

        type AuthData {
            userId: ID!
            token: String!
            tokenExpiration: Int!
            email: String!
            fullName:String!
            status: Int!
            statusCode: Int!
            message: String!
        }

        type Booking {
            _id: ID!
            event: Event!
            user: User!
            createdAt: String!
            updatedAt: String!
        }

        type CategoryAdd {
            _id: ID!
            categoryName:String!
        }

        type CategoryFetch {
            _id:ID!,
            categoryName:String!
        }

        type PractionerFetch{
            userId:String!
            address: String!
            bio: String!
            website: String!
            rate: String!
            feeDetails: String!
            certification: [String]!
            training: [String]!
            education: [String]!
            specialServicesOffer: String!
            profession:[String]!
            firstName:String!
            lastName:String!
        }

        type MessageListForUser{
            text:String!
            userId: String!
            sendingTime: String!
        }

        type GetMessageList{
            firstName : String!
            lastName : String!
            sendFrom : String!
            sendTo : String!
        }

        type InsertMessageData{
            status: Boolean!
            statusCode: Int!
            message: String!
        }

        input MessageInput{
            sendTo:String!
            sendFrom:String!
            text:String!
        }
        
        input EventInput {
            title: String!
            description: String!
            price: Float!
            date: String!
        }

        input UserInput {
            firstName: String!
            lastName: String!
            email: String!
            password: String!
            role: String!
            cellNumber: String!
        }

        input UpdateUserInput {
             userId:String!
            education: String!
            experience: String!
            qualifications: String!
            subSpecialties: String!
        }

        input CreatePractionerInput{
            userId:String!
            address: String!
            bio: String!
            website: String!
            rate: String!
            feeDetails: String!
            certification: [String]!
            training: [String]!
            education: [String]!
            specialServicesOffer: String!
            profession:[String]!
            categoryId:String!
        }

        input CategoryInput {
            categoryName: String!
        }


        type RootQuery {
            events: [Event!]!
            bookings: [Booking!]!
            login(email: String!, password: String!): AuthData!
            fetchCategory:[CategoryFetch!]!
            fetchPactioner(categoryId:String):[PractionerFetch]
            searchCategory(search:String!): [CategoryFetch!]!
            getMessageList(loginUserId:String!): [GetMessageList]
            getparticularUserMessageList(practionerId: String!, userId:String!) : [MessageListForUser]
        }

        type RootMutation {
            createEvent(eventInput: EventInput): Event
            userSignUp(userInput: UserInput): AuthData!
            updateUser(updateUserInput:UpdateUserInput):UpdateUser!
            createCategory(categoryInput: CategoryInput) :CategoryAdd!
            sendIndividualMessage(messageInput: MessageInput) :InsertMessageData!
            deleteEvent(eventId: ID!): Event!
            bookEvent(eventId: ID!): Booking!
            cancelBooking(bookingId: ID!): Event!
            createPactionerProfile(createPractionerInput:CreatePractionerInput) :CreatePractioner!
        }

        schema {
            query: RootQuery
            mutation: RootMutation
        }
    `);
